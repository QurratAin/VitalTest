# Generated by Django 5.2 on 2025-05-01 23:31

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BloodAnalyzer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(help_text='Unique device serial number (e.g., VA-205-0001)', max_length=20, unique=True)),
                ('device_type', models.CharField(choices=[('core', 'VitalOne Core Analyzer'), ('mobile', 'VitalOne Mobile Unit'), ('prototype', 'Prototype Device')], default='core', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('calibration', 'Needs Calibration'), ('maintenance', 'In Maintenance'), ('decommissioned', 'Decommissioned')], default='active', max_length=20)),
                ('last_calibration', models.DateTimeField(blank=True, help_text='Last calibration timestamp', null=True)),
                ('next_calibration_due', models.DateTimeField(blank=True, help_text='Automatically set to last_calibration + 30 days', null=True)),
                ('location', models.CharField(help_text="Factory floor/lab location (e.g., 'Factory QA Line 2')", max_length=100)),
                ('manufacturing_date', models.DateField()),
                ('assigned_technician', models.ForeignKey(help_text='Technician responsible for this device', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blood Analyzer Device',
                'verbose_name_plural': 'Blood Analyzers',
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Human-readable name (e.g., 'Factory Floor DB')", max_length=50, unique=True)),
                ('source_type', models.CharField(choices=[('factory', 'Factory Database'), ('cloud', 'Cloud Central'), ('legacy', 'Legacy System')], max_length=20)),
                ('last_sync', models.DateTimeField(blank=True, help_text='Last successful sync timestamp', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable this data source')),
            ],
            options={
                'verbose_name': 'Data Source',
                'verbose_name_plural': 'Data Sources',
                'indexes': [models.Index(fields=['source_type'], name='devices_dat_source__02ad7d_idx'), models.Index(fields=['is_active'], name='devices_dat_is_acti_c5fa84_idx')],
            },
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the sync was attempted')),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('partial', 'Partial')], help_text='Result of the sync operation', max_length=20)),
                ('records_processed', models.IntegerField(default=0, help_text='Number of records processed in this sync')),
                ('error_message', models.TextField(blank=True, help_text='Error details if sync failed')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='devices.datasource')),
            ],
            options={
                'verbose_name': 'Sync Log',
                'verbose_name_plural': 'Sync Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TestRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_id', models.CharField(help_text='Batch ID (e.g., TR-20240520-001)', max_length=50, unique=True)),
                ('run_type', models.CharField(choices=[('qc', 'Quality Control Test'), ('production', 'Production Run'), ('maintenance', 'Maintenance Test')], default='production', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the test batch was executed')),
                ('is_abnormal', models.BooleanField(default=False, help_text='Auto-set if any metric fails QC')),
                ('is_factory_data', models.BooleanField(default=False, help_text='True if data originated from factory machines')),
                ('notes', models.TextField(blank=True, help_text='Optional technician comments')),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='test_runs', to='devices.datasource')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='test_runs', to='devices.bloodanalyzer')),
                ('executed_by', models.ForeignKey(help_text='User who performed this test', on_delete=django.db.models.deletion.PROTECT, related_name='executed_runs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Test Run',
                'verbose_name_plural': 'Test Runs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TestMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('hgb', 'Hemoglobin (g/dL)'), ('wbc', 'White Blood Cells (10³/μL)'), ('plt', 'Platelets (10³/μL)'), ('glc', 'Glucose (mg/dL)')], max_length=20)),
                ('value', models.FloatField(help_text='Actual measured value', validators=[django.core.validators.MinValueValidator(0)])),
                ('expected_min', models.FloatField(help_text='Minimum acceptable value for QC')),
                ('expected_max', models.FloatField(help_text='Maximum acceptable value for QC')),
                ('test_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='devices.testrun')),
            ],
            options={
                'verbose_name': 'Test Metric',
                'verbose_name_plural': 'Test Metrics',
            },
        ),
        migrations.AddIndex(
            model_name='bloodanalyzer',
            index=models.Index(fields=['device_id'], name='devices_blo_device__6ec0d2_idx'),
        ),
        migrations.AddIndex(
            model_name='bloodanalyzer',
            index=models.Index(fields=['status'], name='devices_blo_status_021799_idx'),
        ),
        migrations.AddIndex(
            model_name='bloodanalyzer',
            index=models.Index(fields=['device_type'], name='devices_blo_device__300aaa_idx'),
        ),
        migrations.AddIndex(
            model_name='synclog',
            index=models.Index(fields=['source', 'timestamp'], name='devices_syn_source__d53f03_idx'),
        ),
        migrations.AddIndex(
            model_name='synclog',
            index=models.Index(fields=['status'], name='devices_syn_status_63a028_idx'),
        ),
        migrations.AddIndex(
            model_name='testrun',
            index=models.Index(fields=['device', 'timestamp'], name='devices_tes_device__9eda0f_idx'),
        ),
        migrations.AddIndex(
            model_name='testrun',
            index=models.Index(fields=['is_abnormal'], name='devices_tes_is_abno_4c3aa9_idx'),
        ),
        migrations.AddIndex(
            model_name='testrun',
            index=models.Index(fields=['run_type'], name='devices_tes_run_typ_718a27_idx'),
        ),
        migrations.AddConstraint(
            model_name='testmetric',
            constraint=models.CheckConstraint(condition=models.Q(('expected_max__gt', models.F('expected_min'))), name='valid_metric_range'),
        ),
        migrations.AddConstraint(
            model_name='testmetric',
            constraint=models.UniqueConstraint(fields=('test_run', 'metric_type'), name='unique_metric_per_run'),
        ),
    ]
